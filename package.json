{
  "name": "config-server",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./main.js",
    "getschema": "cp prisma/config-schema.prisma ../shared-db/prisma/ && cd ../shared-db && node concatenate-schemas.js && cd ../config-server && cp ../shared-db/prisma/schema.prisma ./prisma/ ",
    "generate": "echo 'remember to getschema first' && npx prisma generate",
    "migrate": "cd ../shared-db && npx prisma migrate dev --schema=./prisma/schema.prisma && cd ../config-server",
    "push": "npx prisma push",
    "test": "jest",
    "dockerbuild": "sh ./docker_cleanup.sh && docker build -t config-server .",
    "dockerrun": "docker run --name config-server-container -p 3000:3000 -d config-server",
    "dockerdebug": "docker run --name config-server-container -p 3000:3000 config-server",
    "dockertest": "docker run --rm config-server npm run test",
    "dockerpull": "docker pull ohthepain/config-server:latest",
    "dockerpush": "echo do not push from your machine. image was build with your machine architecture. correct architecture is graviton",
    "dockerclean": "sh ./docker_cleanup.sh",
    "viewdb": "npx prisma studio",
    "resetdb": "npx prisma migrate reset",
    "testworkflows": "act push"
  },
  "dependencies": {
    "@prisma/client": "^5.14.0",
    "bcrypt": "^5.1.1",
    "debug": "~2.6.9",
    "dotenv": "^16.4.5",
    "express": "~4.16.1",
    "http-errors": "~1.6.3",
    "jade": "~1.11.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "~1.9.1"
  },
  "devDependencies": {
    "eslint": "^9.3.0",
    "eslint-plugin-json": "^3.1.0",
    "jest": "^29.7.0",
    "prisma": "^5.14.0",
    "supertest": "^7.0.0"
  },
  "jest": {
    "globalSetup": "./routes/__tests__/create-test-users.js",
    "testEnvironment": "node",
    "testMatch": [
      "**/__tests__/**/test*.js?(x)",
      "**/?(*.)+(spec|test).js?(x)"
    ],
    "collectCoverage": true,
    "collectCoverageFrom": [
      "**/*.{js,jsx}",
      "!**/node_modules/**",
      "!**/coverage/**",
      "!**/vendor/**",
      "!./util/**"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 50,
        "functions": 50,
        "lines": 50,
        "statements": 50
      }
    },
    "coverageReporters": [
      "json",
      "lcov",
      "text",
      "clover"
    ]
  }
}
